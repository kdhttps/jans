package io.jans.chip;

import android.content.DialogInterface;
import android.os.Bundle;

import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import androidx.biometric.BiometricPrompt;

import androidx.lifecycle.Observer;

import java.security.KeyPair;

import java.security.Signature;

import io.jans.chip.factories.BiometricHandler;
import io.jans.chip.modal.Fido.config.FidoConfigurationResponse;
import io.jans.chip.modelview.FidoConfigurationViewModel;
import io.jans.chip.utils.AppConfig;


public class FidoEnrolmentActivity extends AppCompatActivity {
    public static final String TAG = FidoEnrolmentActivity.class.getName();
    EditText fidoIssuer;
    Button fidoRegisterButton;
    FidoConfigurationViewModel fidoConfigurationViewModel;
    private String mToBeSignedMessage;
    AlertDialog.Builder errorDialog;
    AppDatabase appDatabase;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_fido_enrolment);
        fidoConfigurationViewModel = new FidoConfigurationViewModel(getApplicationContext());
        fidoIssuer = findViewById(R.id.fidoIssuer);
        fidoRegisterButton = findViewById(R.id.fidoRegister);

        errorDialog = new AlertDialog.Builder(this);
        fidoRegisterButton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String fidoIssuerText = fidoIssuer.getText().toString();
                Log.d(TAG, fidoIssuerText);
                fidoConfigurationViewModel.fetchFidoConfiguration("https://admin-ui-test.gluu.org"+ AppConfig.FIDO_CONFIG_URL).observe(FidoEnrolmentActivity.this, new Observer<FidoConfigurationResponse>() {
                    @Override
                    public void onChanged(FidoConfigurationResponse fidoConfiguration) {
                        if (fidoConfiguration.isSuccessful()) {
                            BiometricHandler biometricHandler = new BiometricHandler(getApplicationContext());
                            if (biometricHandler.canAuthenticateWithStrongBiometrics()) {  // Check whether this device can authenticate with biometrics
                                Log.i(TAG, "Try registration");
                                // Generate keypair and init signature
                                Signature signature;
                                try {
                                    KeyPair keyPair = biometricHandler.generateKeyPair(AppConfig.KEY_NAME, true);
                                    // Send public key part of key pair to the server, this public key will be used for authentication
                                    mToBeSignedMessage = Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE) +
                                            ":" +
                                            AppConfig.KEY_NAME +
                                            ":" +
                                            // Generated by the server to protect against replay attack
                                            "12345";
                                    biometricHandler.setSignedMessage(mToBeSignedMessage);
                                    biometricHandler.setOperationType(AppConfig.FIDO_ENROLMENT);
                                    signature = biometricHandler.initSignature(AppConfig.KEY_NAME);
                                } catch (Exception e) {
                                    throw new RuntimeException(e);
                                }
                                // Create biometricPrompt

                                showBiometricPrompt(signature,
                                        biometricHandler,
                                        "Fido Enrolment",
                                        "Enrol using your biometric credential",
                                        "Touch the fingerprint sensor");
                            }
                        } else {
                            //Toast.makeText(this, "Cannot use biometric", Toast.LENGTH_SHORT).show();
                            //showErrorDialog(opConfiguration.getOperationError().getMessage());
                        }

                    }
                });
            }
        });
    }
    private void showBiometricPrompt(Signature signature, BiometricHandler biometricHandler, String title, String subTitle, String description) {
        BiometricPrompt.AuthenticationCallback authenticationCallback = biometricHandler.getAuthenticationCallback();
        BiometricPrompt mBiometricPrompt = new BiometricPrompt(this, biometricHandler.getMainThreadExecutor(), authenticationCallback);
        // Set prompt info
        BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
                .setDescription(description)
                .setTitle(title)
                .setSubtitle(subTitle)
                .setNegativeButtonText("Cancel")
                .build();

        // Show biometric prompt
        if (signature != null) {
            Log.i(TAG, "Show biometric prompt");
            mBiometricPrompt.authenticate(promptInfo, new BiometricPrompt.CryptoObject(signature));
        }
    }
    private void showErrorDialog(String message) {
        createErrorDialog(message);
        errorDialog.show();
        //registerProgressBar.setVisibility(View.INVISIBLE);
        //registerButton.setEnabled(true);
    }

    private void createErrorDialog(String message) {
        errorDialog.setMessage(message)
                .setTitle(R.string.error_title)
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        dialog.cancel();
                    }
                });
    }
}